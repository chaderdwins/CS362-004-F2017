        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Chad Erdwins CS 362
        -:    3:unittest1.c
        -:    4:testing the function isGameOver() in dominion.c
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:#include <stdio.h>
        -:   11:#include <math.h>
        -:   12:#include <stdlib.h>
        -:   13:
        -:   14:int critFail = 0;
        -:   15:
        3:   16:void personalAssert(int choya, char *errorMsg)
        -:   17:{
        3:   18:	if (choya == 0) {
        1:   19:		printf("Warning: %s\n\n", errorMsg);
        1:   20:		critFail = 1;
        -:   21:	}
        3:   22:}
        -:   23:
        1:   24:void reviewAss()
        -:   25:{
        1:   26:	if (!critFail) {
    #####:   27:		printf("Testing Done. Congratulations!\n\n");
        -:   28:	}
        1:   29:}
        -:   30:
        1:   31:int main()
        -:   32:{
        1:   33:	printf("Testing isGameOver()...\n\n");
        -:   34:	int gameHold;
        -:   35:	int i;
        1:   36:	struct gameState *gameOn = calloc(1, sizeof(struct gameState));
        -:   37:
       27:   38:	for (i = 0; i < treasure_map; i++) {
       26:   39:		gameOn->supplyCount[i] = 10;
        -:   40:	}
        -:   41:
        1:   42:	gameHold = isGameOver(gameOn);
        1:   43:	personalAssert(gameHold == 0, "supplyCount is set!");
        -:   44:
        -:   45:	//I am forcing game over here
        1:   46:	gameOn->supplyCount[province] = 0;
        1:   47:	gameHold = isGameOver(gameOn);
        1:   48:	personalAssert(gameHold == 1, "You should see this message if province is set to zero and it is game over!");
        -:   49:
        -:   50:	//another parameter that should force game over.
        1:   51:	gameOn->supplyCount[province] = 10;
        1:   52:	gameOn->supplyCount[duchy] = 0;
        1:   53:	gameHold = isGameOver(gameOn);
        1:   54:	personalAssert(gameHold == 1, "Duchy supply is zero, should result in game over!");
        -:   55:
        1:   56:	reviewAss();
        1:   57:	return 0;
        -:   58:}
