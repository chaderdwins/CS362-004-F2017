        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Chad Erdwins CS 362
        -:    3:unittest3.c
        -:    4:testing the function supplyCount()in dominion.c
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include <stdio.h>
        -:    9:
        -:   10:int critFail = 0;
        -:   11:
        3:   12:void personalAssertion(int choya, const char *errorMsg) {
        3:   13:	if (!choya) {
    #####:   14:		printf("FAIL: %s\n", errorMsg);
    #####:   15:		critFail = 1;
        -:   16:	}
        3:   17:}
        -:   18:
        1:   19:void verifyAssert() {
        1:   20:	if (!critFail) {
        1:   21:		printf("NO BUGS DETECTED!\n");
        -:   22:	}
        -:   23:	else {
    #####:   24:		printf("WARNING! BUGS ARE PRESENT!\n");
        -:   25:	}
        1:   26:}
        -:   27:
        1:   28:int main() {
        1:   29:	printf("Now testing supplyCount()...");
        -:   30:	struct gameState gameOn;
        1:   31:	struct gameState *firstG = &gameOn;
        1:   32:	int participants = 2;
        1:   33:	int cardsAvailable[] = { smithy,adventurer,gardens,embargo,cutpurse,mine,
        -:   34:		ambassador,outpost,baron,tribute };
        1:   35:	int rngSeed = 3465;
        -:   36:
        -:   37:
        -:   38:	//call to initializeGame passing in the relevant information
        1:   39:	initializeGame(participants, cardsAvailable, rngSeed, firstG);
        -:   40:
        -:   41:	//using payLoad to keep track of the supply amount for copper, silver, and gold
        1:   42:	int payLoad = supplyCount(copper, firstG);
        -:   43:
        -:   44:	//46 is the amount of copper cards in a 2 player game
        1:   45:	personalAssertion((payLoad == 46), "Amount of Copper Present");
        -:   46:
        1:   47:	payLoad = supplyCount(silver, firstG);
        -:   48:	//40 is the amount of silver in a game
        1:   49:	personalAssertion((payLoad == 40), "Amount of Silver Present");
        -:   50:
        1:   51:	payLoad = supplyCount(gold, firstG);
        -:   52:	//30 is the amount of gold in a game
        1:   53:	personalAssertion((payLoad == 30), "Amount of Gold Present");
        -:   54:
        1:   55:	verifyAssert();
        -:   56:
        1:   57:	return 0;
        -:   58:}
