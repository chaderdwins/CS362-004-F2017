        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:25
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    10711:    8:int compare(const void* a, const void* b) {
    10711:    9:  if (*(int*)a > *(int*)b)
     2605:   10:    return 1;
     8106:   11:  if (*(int*)a < *(int*)b)
     2241:   12:    return -1;
     5865:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      168:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      168:   44:  SelectStream(1);
      168:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      168:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
       30:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      138:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1508:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    15072:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    13702:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      137:   73:  if (numPlayers == 2)
        -:   74:    {
       69:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       68:   77:  else if (numPlayers == 3)
        -:   78:    {
       54:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       14:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      137:   87:  if (numPlayers == 2)
        -:   88:    {
       69:   89:      state->supplyCount[estate] = 8;
       69:   90:      state->supplyCount[duchy] = 8;
       69:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       68:   95:      state->supplyCount[estate] = 12;
       68:   96:      state->supplyCount[duchy] = 12;
       68:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      137:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      137:  102:  state->supplyCount[silver] = 40;
      137:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2877:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    22605:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    21235:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1370:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      374:  115:		  if (numPlayers == 2){ 
       95:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       92:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1183:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1370:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    19865:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      493:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      356:  140:      state->deckCount[i] = 0;
     1424:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1068:  143:	  state->deck[i][j] = estate;
     1068:  144:	  state->deckCount[i]++;
        -:  145:	}
     2848:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     2492:  148:	  state->deck[i][j] = copper;
     2492:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      493:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      356:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      493:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      356:  166:      state->handCount[i] = 0;
      356:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3836:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     3699:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      137:  182:  state->outpostPlayed = 0;
      137:  183:  state->phase = 0;
      137:  184:  state->numActions = 1;
      137:  185:  state->numBuys = 1;
      137:  186:  state->playedCardCount = 0;
      137:  187:  state->whoseTurn = 0;
      137:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      822:  192:  for (it = 0; it < 5; it++){
      685:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      137:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      137:  198:  return 0;
        -:  199:}
        -:  200:
      507:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      507:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      507:  209:  if (state->deckCount[player] < 1)
        8:  210:    return -1;
      499:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6530:  214:  while (state->deckCount[player] > 0) {
     5532:  215:    card = floor(Random() * state->deckCount[player]);
     5532:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5532:  217:    newDeckPos++;
    20483:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    14951:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5532:  221:    state->deckCount[player]--;
        -:  222:  }
     6031:  223:  for (i = 0; i < newDeckPos; i++) {
     5532:  224:    state->deck[player][i] = newDeck[i];
     5532:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      499:  228:  return 0;
        -:  229:}
        -:  230:
      573:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      573:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      573:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      573:  243:  if ( state->numActions < 1 )
        -:  244:    {
      384:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      189:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      189:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      189:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        1:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      188:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      188:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      188:  269:  return 0;
        -:  270:}
        -:  271:
      313:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      313:  280:  who = state->whoseTurn;
        -:  281:
      313:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      313:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
      313:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
      313:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      313:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      313:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      313:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      313:  308:  return 0;
        -:  309:}
        -:  310:
     2865:  311:int numHandCards(struct gameState *state) {
     2865:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
     5036:  315:int handCard(int handPos, struct gameState *state) {
     5036:  316:  int currentPlayer = whoseTurn(state);
     5036:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      629:  320:int supplyCount(int card, struct gameState *state) {
      629:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     8959:  346:int whoseTurn(struct gameState *state) {
     8959:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      445:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      445:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    34153:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    33708:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    33708:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      445:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      445:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      240:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      205:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      445:  370:  state->outpostPlayed = 0;
      445:  371:  state->phase = 0;
      445:  372:  state->numActions = 1;
      445:  373:  state->coins = 0;
      445:  374:  state->numBuys = 1;
      445:  375:  state->playedCardCount = 0;
      445:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     2670:  380:  for (k = 0; k < 5; k++){
     2225:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      445:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      445:  387:  return 0;
        -:  388:}
        -:  389:
      335:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      335:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
       12:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      323:  401:  j = 0;
     8398:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     8075:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        1:  406:	  j++;
        -:  407:	}
        -:  408:    }
      323:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
      323:  414:  return 0;
        -:  415:}
        -:  416:
       22:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       22:  420:  int score = 0;
        -:  421:  //score from hand
       77:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       55:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       55:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       55:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       55:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       55:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       55:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
      190:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
      168:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
      168:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
      168:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
      168:  438:      if (state->discard[player][i] == province) { score = score + 6; };
      168:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      168:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
      190:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
      168:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
      168:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
      168:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
      168:  449:      if (state->deck[player][i] == province) { score = score + 6; };
      168:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      168:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       22:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    15383:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    15383:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     2115:  533:    for (i = 0; i < state->discardCount[player];i++){
     1972:  534:      state->deck[player][i] = state->discard[player][i];
     1972:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      143:  538:    state->deckCount[player] = state->discardCount[player];
      143:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      143:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      143:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      143:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      143:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      143:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
      143:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      143:  563:    state->deckCount[player]--;
      143:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    15240:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    15240:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    15240:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    15240:  576:    state->deckCount[player]--;
    15240:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    15383:  580:  return 0;
        -:  581:}
        -:  582:
      626:  583:int getCost(int cardNumber)
        -:  584:{
      626:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
      176:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
      272:  598:      return 3;
        -:  599:    case gold:
       90:  600:      return 6;
        -:  601:    case adventurer:
       44:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
       44:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
       92:  645:void playAdventurer(struct gameState *state, int currentPlayer) {
       92:  646:    int z = 0;// this is the counter for the temp hand
       92:  647:    int drawntreasure = 0;
        -:  648:    int temphand[MAX_HAND];
        -:  649:    int cardDrawn;
        -:  650:
    11776:  651:    while(drawntreasure < 3){
    11592:  652:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        8:  653:          shuffle(currentPlayer, state);
        -:  654:        }
    11592:  655:        drawCard(currentPlayer, state);
    11592:  656:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    11592:  657:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == province) {
      276:  658:          drawntreasure++;
        -:  659:        }
        -:  660:        else {
    11316:  661:          temphand[z] = cardDrawn;
    11316:  662:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    11316:  663:          z++;
        -:  664:        }
        -:  665:    }
    11500:  666:    while(z - 1 >= 0){
    11316:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    11316:  668:	z -= 1;
        -:  669:    }
       92:  670:}
        -:  671:
    #####:  672:void playBaron(struct gameState *state, int currentPlayer, int choice1) {
    #####:  673:    state->numBuys++;//Increase buys by 1!
    #####:  674:    if (choice1 <= 0){//Boolean true or going to discard an estate
    #####:  675:	int p = 0;//Iterator for hand!
    #####:  676:	int card_not_discarded = 1;//Flag for discard set!
    #####:  677:	while(card_not_discarded) {
    #####:  678:	    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  679:	        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  680:	        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  681:	        state->discardCount[currentPlayer]++;
    #####:  682:	        for (;p < state->handCount[currentPlayer]; p++){
    #####:  683:	            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  684:	        }
    #####:  685:	        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  686:	        state->handCount[currentPlayer]--;
    #####:  687:	        card_not_discarded = 0;//Exit the loop
        -:  688:	    }
    #####:  689:	    else if (p > state->handCount[currentPlayer]){
        -:  690:	        if(DEBUG) {
        -:  691:	            printf("No estate cards in your hand, invalid choice\n");
        -:  692:		    printf("Must gain an estate if there are any\n");
        -:  693:	        }
    #####:  694:	        if (supplyCount(estate, state) > 0){
    #####:  695:	            gainCard(estate, state, 0, currentPlayer);
    #####:  696:	            state->supplyCount[estate]++;//Decrement estates
    #####:  697:	            if (supplyCount(estate, state) == 0){
    #####:  698:		        isGameOver(state);
        -:  699:	            }
        -:  700:	        }
    #####:  701:	        card_not_discarded = 0;//Exit the loop
        -:  702:	    }	    
        -:  703:	    else {
    #####:  704:	        p++;//Next card
        -:  705:	    }
        -:  706:	}
        -:  707:    }
        -:  708:    else {
    #####:  709:	if (supplyCount(estate, state) > 0) {
    #####:  710:	    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  711:	    state->supplyCount[estate]--;//Decrement Estates
    #####:  712:	    if (supplyCount(estate, state) == 0){
    #####:  713:	        isGameOver(state);
        -:  714:	    }
        -:  715:	}
        -:  716:    }
    #####:  717:}
        -:  718:
      147:  719:void playSmithy(struct gameState *state, int currentPlayer, int handPos) {
        -:  720:    int i;
        -:  721:
        -:  722:    //+3 Cards
      735:  723:    for (i = 0; i <= 3; i++) {
      588:  724:	drawCard(currentPlayer, state);
        -:  725:    }
        -:  726:    //discard card from hand
      147:  727:    discardCard(handPos, currentPlayer, state, 0);
      147:  728:}
        -:  729:
    #####:  730:void playFeast(struct gameState *state, int currentPlayer, int choice1) {
        -:  731:    int i;
        -:  732:    int x;
        -:  733:    int temphand[MAX_HAND];// moved above the if
        -:  734:    
        -:  735:    //gain card with cost up to 5
        -:  736:    //Backup hand
    #####:  737:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  738:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  739:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  740:    }
        -:  741:
        -:  742:    //Update Coins for Buy
    #####:  743:    updateCoins(currentPlayer, state, 5);
    #####:  744:    x = 1;//Condition to loop on
        -:  745:    
    #####:  746:    while( x == 1) {//Buy one card
    #####:  747:	if (supplyCount(choice1, state) <= 0){
        -:  748:	    if (DEBUG){
        -:  749:	       printf("None of that card left, sorry!\n");
        -:  750:	    }
        -:  751:	    if (DEBUG){
        -:  752:	        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  753:	    }
    #####:  754:	    x = 0;//No more buying cards
        -:  755:	}
    #####:  756:	else if (state->coins < getCost(choice1)){
    #####:  757:	    printf("That card is too expensive!\n");
    #####:  758:	    x = 0;//No more buying cards
        -:  759:	    
        -:  760:	    if (DEBUG){
        -:  761:	        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  762:	    }
        -:  763:	}
        -:  764:        else{
        -:  765:            if (DEBUG){
        -:  766:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  767:            }
        -:  768:
    #####:  769:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  770:            x = 0;//No more buying cards
        -:  771:
        -:  772:            if (DEBUG){
        -:  773:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  774:            }
        -:  775:        }
        -:  776:    }     
        -:  777:
        -:  778:    //Reset Hand
    #####:  779:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  780:        state->hand[currentPlayer][i] = temphand[i];
    #####:  781:	temphand[i] = -1;
        -:  782:    }
    #####:  783:}
        -:  784:
    #####:  785:void playTribute(struct gameState *state, int currentPlayer){
        -:  786:    int i;
    #####:  787:    int nextPlayer = currentPlayer + 1;
    #####:  788:    int tributeRevealedCards[2] = {-1, -1}; 
    #####:  789:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  790:        nextPlayer = 0;
        -:  791:    }
        -:  792:      
    #####:  793:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  794:	if (state->deckCount[nextPlayer] > 0){
    #####:  795:	    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  796:	    state->deckCount[nextPlayer]--;
        -:  797:	}
    #####:  798:	else if (state->discardCount[nextPlayer] > 0){
    #####:  799:	    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  800:	    state->discardCount[nextPlayer]--;
        -:  801:	}
        -:  802:	else{
        -:  803:	    //No Card to Reveal
        -:  804:	    if (DEBUG){
        -:  805:		printf("No cards to reveal\n");
        -:  806:	    }
        -:  807:	}
        -:  808:    }    
        -:  809:    else{
    #####:  810:	if (state->deckCount[nextPlayer] == 0){
    #####:  811:	    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  812:		state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  813:		state->deckCount[nextPlayer]++;
    #####:  814:		state->discard[nextPlayer][i] = -1;
    #####:  815:		state->discardCount[nextPlayer]--;
        -:  816:	    }	    
    #####:  817:            shuffle(nextPlayer,state);//Shuffle the deck
        -:  818:        } 
    #####:  819:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  820:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  821:	state->deckCount[nextPlayer]--;
    #####:  822:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  823:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  824:	state->deckCount[nextPlayer]--;
        -:  825:    }    
        -:  826:	       
    #####:  827:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  828:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  829:	state->playedCardCount++;
    #####:  830:	tributeRevealedCards[1] = -1;
        -:  831:    }
        -:  832:
    #####:  833:    for (i = 0; i <= 2; i ++){
    #####:  834:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  835:            state->coins += 2;
        -:  836:	}
        -:  837:	    
    #####:  838:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  839:	    drawCard(currentPlayer, state);
    #####:  840:	    drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:	else{//Action Card
    #####:  843:	    state->numActions = state->numActions + 2;
        -:  844:	}
        -:  845:    }	    
    #####:  846:}
        -:  847:
      291:  848:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  849:{
        -:  850:  int i;
        -:  851:  int j;
        -:  852:  int k;
        -:  853:  int index;
      291:  854:  int currentPlayer = whoseTurn(state);
        -:  855:  
        -:  856:  //uses switch to select card and perform actions
      291:  857:  switch( card ){
        -:  858:    case adventurer:
       92:  859:      playAdventurer(state, currentPlayer);
       92:  860:      return 0;
        -:  861:			
        -:  862:    case council_room:
        -:  863:      //+4 Cards
      250:  864:      for (i = 0; i < 4; i++) {
      200:  865:	  drawCard(currentPlayer, state);
        -:  866:      }
        -:  867:			
        -:  868:      //+1 Buy
       50:  869:      state->numBuys++;
        -:  870:			
        -:  871:      //Each other player draws a card
      192:  872:      for (i = 0; i < state->numPlayers; i++) {
      142:  873:	  if ( i != currentPlayer ) {
       92:  874:	      drawCard(i, state);
        -:  875:	    }
        -:  876:	}
        -:  877:			
        -:  878:      //put played card in played card pile
       50:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:			
       50:  881:      return 0;
        -:  882:			
        -:  883:    case feast:
    #####:  884:      playFeast(state, currentPlayer, choice1);	
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case gardens:
        1:  888:      return -1;
        -:  889:			
        -:  890:    case mine:
    #####:  891:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  892:
    #####:  893:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold){
    #####:  894:	  return -1;
        -:  895:	}
        -:  896:		
    #####:  897:      if (choice2 > treasure_map || choice2 < curse){
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ){
    #####:  902:	  return -1;
        -:  903:	}
        -:  904:
    #####:  905:      gainCard(choice2, state, 2, currentPlayer);
        -:  906:
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
        -:  909:
        -:  910:      //discard trashed card
    #####:  911:      for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  912:	  if (state->hand[currentPlayer][i] == j){
    #####:  913:	      discardCard(i, currentPlayer, state, 0);			
    #####:  914:	      break;
        -:  915:	    }
        -:  916:	}
        -:  917:			
    #####:  918:      return 0;
        -:  919:			
        -:  920:    case remodel:
    #####:  921:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  922:
    #####:  923:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
    #####:  924:	  return -1;
        -:  925:	}
        -:  926:
    #####:  927:      gainCard(choice2, state, 0, currentPlayer);
        -:  928:
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
        -:  931:
        -:  932:      //discard trashed card
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  934:	  if (state->hand[currentPlayer][i] == j){
    #####:  935:	      discardCard(i, currentPlayer, state, 0);			
    #####:  936:	      break;
        -:  937:	    }
        -:  938:	}
        -:  939:
        -:  940:
    #####:  941:      return 0;
        -:  942:		
        -:  943:    case smithy:
      147:  944:      playSmithy(state, currentPlayer, handPos);
      147:  945:      return 0;
        -:  946:		
        -:  947:    case village:
        -:  948:      //+1 Card
        1:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+2 Actions
        1:  952:      state->numActions = state->numActions + 2;
        -:  953:			
        -:  954:      //discard played card from hand
        1:  955:      discardCard(handPos, currentPlayer, state, 0);
        1:  956:      return 0;
        -:  957:		
        -:  958:    case baron:
    #####:  959:      playBaron(state, currentPlayer, choice1);
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case great_hall:
        -:  963:      //+1 Card
    #####:  964:      drawCard(currentPlayer, state);
        -:  965:			
        -:  966:      //+1 Actions
    #####:  967:      state->numActions++;
        -:  968:			
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case minion:
        -:  974:      //+1 action
    #####:  975:      state->numActions++;
        -:  976:			
        -:  977:      //discard card from hand
    #####:  978:      discardCard(handPos, currentPlayer, state, 0);
        -:  979:			
    #####:  980:      if (choice1){
    #####:  981:	  state->coins = state->coins + 2;
        -:  982:	}
        -:  983:			
    #####:  984:      else if (choice2){	//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  985:	  //discard hand
    #####:  986:	  while(numHandCards(state) > 0){
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:				
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++){
    #####:  992:	      drawCard(currentPlayer, state);
        -:  993:	    }
        -:  994:				
        -:  995:	  //other players discard hand and redraw if hand size > 4
    #####:  996:	  for (i = 0; i < state->numPlayers; i++){
    #####:  997:	      if (i != currentPlayer){
    #####:  998:		  if ( state->handCount[i] > 4 ) {
        -:  999:		      //discard hand
    #####: 1000:		      while( state->handCount[i] > 0 ){
    #####: 1001:			  discardCard(handPos, i, state, 0);
        -: 1002:			}
        -: 1003:							
        -: 1004:		      //draw 4
    #####: 1005:		      for (j = 0; j < 4; j++){
    #####: 1006:			  drawCard(i, state);
        -: 1007:			}
        -: 1008:		    }
        -: 1009:		}
        -: 1010:	    }			
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      if (choice1 == 1){
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    #####: 1018:	  drawCard(currentPlayer, state);
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2){
        -: 1021:	  //+2 coins
    #####: 1022:	  state->coins = state->coins + 2;
        -: 1023:	}
        -: 1024:      else {
        -: 1025:	  //trash 2 cards in hand
    #####: 1026:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1027:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1028:	}
        -: 1029:			
        -: 1030:      //discard card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case tribute:
    #####: 1035:      playTribute(state, currentPlayer);
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case ambassador:
    #####: 1039:      j = 0;		//used to check if player has enough cards to discard
        -: 1040:
    #####: 1041:      if (choice2 > 2 || choice2 < 0) {
    #####: 1042:	  return -1;				
        -: 1043:	}
        -: 1044:
    #####: 1045:      if (choice1 == handPos) {
    #####: 1046:	  return -1;
        -: 1047:	}
        -: 1048:
    #####: 1049:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1050:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
    #####: 1051:	      j++;
        -: 1052:	    }
        -: 1053:	}
    #####: 1054:      if (j < choice2) {
    #####: 1055:	  return -1;				
        -: 1056:	}
        -: 1057:
        -: 1058:      if (DEBUG) 
        -: 1059:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1060:
        -: 1061:      //increase supply count for choosen card by amount being discarded
    #####: 1062:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1063:			
        -: 1064:      //each other player gains a copy of revealed card
    #####: 1065:      for (i = 0; i < state->numPlayers; i++) {
    #####: 1066:	  if (i != currentPlayer) {
    #####: 1067:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1068:	    }
        -: 1069:	}
        -: 1070:
        -: 1071:      //discard played card from hand
    #####: 1072:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1073:
        -: 1074:      //trash copies of cards returned to supply
    #####: 1075:      for (j = 0; j < choice2; j++) {
    #####: 1076:	  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1077:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
    #####: 1078:		  discardCard(i, currentPlayer, state, 1);
    #####: 1079:		  break;
        -: 1080:		}
        -: 1081:	    }
        -: 1082:	}			
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case cutpurse:
        -: 1087:
    #####: 1088:      updateCoins(currentPlayer, state, 2);
    #####: 1089:      for (i = 0; i < state->numPlayers; i++)
        -: 1090:	{
    #####: 1091:	  if (i != currentPlayer)
        -: 1092:	    {
    #####: 1093:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1094:		{
    #####: 1095:		  if (state->hand[i][j] == copper)
        -: 1096:		    {
    #####: 1097:		      discardCard(j, i, state, 0);
    #####: 1098:		      break;
        -: 1099:		    }
    #####: 1100:		  if (j == state->handCount[i])
        -: 1101:		    {
    #####: 1102:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1103:			{
        -: 1104:			  if (DEBUG)
        -: 1105:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1106:			}	
    #####: 1107:		      break;
        -: 1108:		    }		
        -: 1109:		}
        -: 1110:					
        -: 1111:	    }
        -: 1112:				
        -: 1113:	}				
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1117:
    #####: 1118:      return 0;
        -: 1119:
        -: 1120:		
        -: 1121:    case embargo: 
        -: 1122:      //+2 Coins
    #####: 1123:      state->coins = state->coins + 2;
        -: 1124:			
        -: 1125:      //see if selected pile is in play
    #####: 1126:      if ( state->supplyCount[choice1] == -1 )
        -: 1127:	{
    #####: 1128:	  return -1;
        -: 1129:	}
        -: 1130:			
        -: 1131:      //add embargo token to selected supply pile
    #####: 1132:      state->embargoTokens[choice1]++;
        -: 1133:			
        -: 1134:      //trash card
    #####: 1135:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1136:      return 0;
        -: 1137:		
        -: 1138:    case outpost:
        -: 1139:      //set outpost flag
    #####: 1140:      state->outpostPlayed++;
        -: 1141:			
        -: 1142:      //discard card
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1144:      return 0;
        -: 1145:		
        -: 1146:    case salvager:
        -: 1147:      //+1 buy
    #####: 1148:      state->numBuys++;
        -: 1149:			
    #####: 1150:      if (choice1)
        -: 1151:	{
        -: 1152:	  //gain coins equal to trashed card
    #####: 1153:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1154:	  //trash card
    #####: 1155:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1156:	}
        -: 1157:			
        -: 1158:      //discard card
    #####: 1159:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case sea_hag:
    #####: 1163:      for (i = 0; i < state->numPlayers; i++){
    #####: 1164:	if (i != currentPlayer){
    #####: 1165:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1166:	  state->discardCount[i]++;
    #####: 1167:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1168:	}
        -: 1169:      }
    #####: 1170:      return 0;
        -: 1171:		
        -: 1172:    case treasure_map:
        -: 1173:      //search hand for another treasure_map
    #####: 1174:      index = -1;
    #####: 1175:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1176:	{
    #####: 1177:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1178:	    {
    #####: 1179:	      index = i;
    #####: 1180:	      break;
        -: 1181:	    }
        -: 1182:	}
    #####: 1183:      if (index > -1)
        -: 1184:	{
        -: 1185:	  //trash both treasure cards
    #####: 1186:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1187:	  discardCard(index, currentPlayer, state, 1);
        -: 1188:
        -: 1189:	  //gain 4 Gold cards
    #####: 1190:	  for (i = 0; i < 4; i++)
        -: 1191:	    {
    #####: 1192:	      gainCard(gold, state, 1, currentPlayer);
        -: 1193:	    }
        -: 1194:				
        -: 1195:	  //return success
    #####: 1196:	  return 1;
        -: 1197:	}
        -: 1198:			
        -: 1199:      //no second treasure_map found in hand
    #####: 1200:      return -1;
        -: 1201:    }
        -: 1202:	
    #####: 1203:  return -1;
        -: 1204:}
        -: 1205:
      198: 1206:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1207:{
        -: 1208:	
        -: 1209:  //if card is not trashed, added to Played pile 
      198: 1210:  if (trashFlag < 1)
        -: 1211:    {
        -: 1212:      //add card to played pile
      198: 1213:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      198: 1214:      state->playedCardCount++;
        -: 1215:    }
        -: 1216:	
        -: 1217:  //set played card to -1
      198: 1218:  state->hand[currentPlayer][handPos] = -1;
        -: 1219:	
        -: 1220:  //remove card from player's hand
      198: 1221:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1222:    {
        -: 1223:      //reduce number of cards in hand
    #####: 1224:      state->handCount[currentPlayer]--;
        -: 1225:    }
      198: 1226:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1227:    {
        -: 1228:      //reduce number of cards in hand
    #####: 1229:      state->handCount[currentPlayer]--;
        -: 1230:    }
        -: 1231:  else 	
        -: 1232:    {
        -: 1233:      //replace discarded card with last card in hand
      198: 1234:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1235:      //set last card to -1
      198: 1236:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1237:      //reduce number of cards in hand
      198: 1238:      state->handCount[currentPlayer]--;
        -: 1239:    }
        -: 1240:	
      198: 1241:  return 0;
        -: 1242:}
        -: 1243:
      313: 1244:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1245:{
        -: 1246:  //Note: supplyPos is enum of choosen card
        -: 1247:	
        -: 1248:  //check if supply pile is empty (0) or card is not used in game (-1)
      313: 1249:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1250:    {
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
        -: 1254:  //added card for [whoseTurn] current player:
        -: 1255:  // toFlag = 0 : add to discard
        -: 1256:  // toFlag = 1 : add to deck
        -: 1257:  // toFlag = 2 : add to hand
        -: 1258:
      313: 1259:  if (toFlag == 1)
        -: 1260:    {
    #####: 1261:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1262:      state->deckCount[player]++;
        -: 1263:    }
      313: 1264:  else if (toFlag == 2)
        -: 1265:    {
    #####: 1266:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1267:      state->handCount[player]++;
        -: 1268:    }
        -: 1269:  else
        -: 1270:    {
      313: 1271:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      313: 1272:      state->discardCount[player]++;
        -: 1273:    }
        -: 1274:	
        -: 1275:  //decrease number in supply pile
      313: 1276:  state->supplyCount[supplyPos]--;
        -: 1277:	 
      313: 1278:  return 0;
        -: 1279:}
        -: 1280:
      770: 1281:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1282:{
        -: 1283:  int i;
        -: 1284:	
        -: 1285:  //reset coin count
      770: 1286:  state->coins = 0;
        -: 1287:
        -: 1288:  //add coins for each Treasure card in player's hand
    36103: 1289:  for (i = 0; i < state->handCount[player]; i++)
        -: 1290:    {
    35333: 1291:      if (state->hand[player][i] == copper)
        -: 1292:	{
     2152: 1293:	  state->coins += 1;
        -: 1294:	}
    33181: 1295:      else if (state->hand[player][i] == silver)
        -: 1296:	{
      422: 1297:	  state->coins += 2;
        -: 1298:	}
    32759: 1299:      else if (state->hand[player][i] == gold)
        -: 1300:	{
      106: 1301:	  state->coins += 3;
        -: 1302:	}	
        -: 1303:    }	
        -: 1304:
        -: 1305:  //add bonus
      770: 1306:  state->coins += bonus;
        -: 1307:
      770: 1308:  return 0;
        -: 1309:}
        -: 1310:
        -: 1311:
        -: 1312://end of dominion.c
        -: 1313:
