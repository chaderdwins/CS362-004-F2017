        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:Chad Erdwins CS 362
        -:    3:randomtestcard2.c
        -:    4:randomly testing council room
        -:    5:*/
        -:    6:#include <stdlib.h>
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:#define MAXTESTS 25
        -:   14:
        2:   15:int main() {
        -:   16:	//setting gamestate
        -:   17:	struct gameState *gameOn;
        -:   18:	int i;
        -:   19:
        -:   20:	//setting up the kingdom cards
        2:   21:	int kingCards[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy };
        -:   22:	
        -:   23:	//declaring variable to keep track of the number of bugs present
        2:   24:	int bugBads = 0;
        -:   25:	
       52:   26:	for (i = 0; i < MAXTESTS; i++) {
       50:   27:		gameOn = malloc(sizeof(struct gameState));
        -:   28:		//declaring and initializing game variables
       50:   29:		int participants = rand() % 4;
       50:   30:		int rngSeed = rand();
       50:   31:		int currentPlayer = 0;
        -:   32:		int beforeHand;
        -:   33:		int afterHand;
        -:   34:
        -:   35:		//initializing the game
       50:   36:		int status = initializeGame(participants, kingCards, rngSeed, gameOn);
        -:   37:
        -:   38:		//randomizing deck count
       50:   39:		gameOn->deckCount[currentPlayer] = rand() % MAX_DECK;
        -:   40:
        -:   41:		//randomizing discard pile
       50:   42:		gameOn->discardCount[currentPlayer] = rand() % MAX_DECK;
        -:   43:
        -:   44:		//randomizing player's hand
       50:   45:		gameOn->handCount[currentPlayer] = rand() % MAX_HAND;
        -:   46:
        -:   47:		//capturing the current players hand count before counil room is called
       50:   48:		beforeHand = gameOn->handCount[currentPlayer];
        -:   49:
        -:   50:		//calling council room
       50:   51:		cardEffect(council_room, 1, 1, 1, gameOn, 0, 0);
        -:   52:
        -:   53:		//capturing the current player's hand count after council room was played
       50:   54:		afterHand = gameOn->handCount[currentPlayer];
        -:   55:
        -:   56:		//comparing the hand before and after council room was played
       50:   57:		if ((beforeHand + 4) != afterHand) {
       50:   58:			bugBads++;
       50:   59:			printf("WARNING: Player did not draw 4 cards\n");
        -:   60:		}
       50:   61:		if ((beforeHand + 3) == afterHand) {
       50:   62:			bugBads++;
       50:   63:			printf("The player drew 3 cards instead of 4 cards\n");
        -:   64:		}
       50:   65:		if ((beforeHand + 5) == afterHand) {
    #####:   66:			bugBads++;
    #####:   67:			printf("The player drew 5 cards instead of 4 cards\n");
        -:   68:		}
       50:   69:		if ((beforeHand + 2) == afterHand) {
    #####:   70:			bugBads++;
    #####:   71:			printf("The player drew 5 cards instead of 4 cards\n");
        -:   72:		}
       50:   73:		free(gameOn);
        -:   74:	}
        2:   75:	printf("Tests Performed: %d\n", MAXTESTS);
        2:   76:	printf("Bugs Detected: %d\n", bugBads);
        -:   77:
        2:   78:	return 0;
        -:   79:}
