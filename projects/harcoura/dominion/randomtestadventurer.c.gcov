        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:Chad Erdwins CS 362
        -:    3:randomtestadventurer.c
        -:    4:randomly testing adventurer card
        -:    5:*/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <assert.h>
        -:   13:#include <time.h>
        -:   14:
        -:   15://declaring this constant to limit the maximum tests
        -:   16:#define MAXIMUSTESTIMUS 25
        -:   17:
       50:   18:int personalAssert(int choya, char* errorMsg) {
       50:   19:  if (!choya) {
       50:   20:    printf ("personalAssert has failed: %s\n", errorMsg);
        -:   21:  }
       50:   22:}
        -:   23:
       50:   24:int postAdventure(struct gameState*status, int participant, int previousHand){
        -:   25:	//checking to see if the player drew at least two treasure cards
       50:   26:	int i = 2;
       50:   27:	if(status->hand[participant][status->handCount[participant] - i] != gold && status->hand[participant][status->handCount[participant] - i] != copper && status->hand[participant][status->handCount[participant] - i] != silver){
    #####:   28:		printf("The player has not drawn at least two treasure cards. Please advise.\n\n");
    #####:   29:		 return 0;	
        -:   30:	}
        -:   31:	//checking to see if the player drew more than 2 treasure cards
       50:   32:	i = 3;
       50:   33:	if(status->hand[participant][status->handCount[participant] - i] == silver || status->hand[participant][status->handCount[participant] - i] == gold || status->hand[participant][status->handCount[participant] - i] == copper){
       50:   34:		printf("The player has drawn more than 2 treasure cards. Please advise.\n\n");
       50:   35:		 return 0;	
        -:   36:	}
        -:   37:		
    #####:   38:		return 1; //should return if things run as expected
        -:   39:}
        -:   40:
        2:   41:int main() {
        -:   42:	//variable declaration that will be used to initialize the game
        -:   43:	int i;
        -:   44:	int rngSeed;
        2:   45:	int gameCards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   46:	int numberInHand; 
        -:   47:	int numberInDeck; 
        -:   48:	int numberPlayers;
        -:   49:	int currentPlayer;
        -:   50:
        -:   51:	struct gameState gameOn;
        2:   52:	printf("Commence random adventurer testing:\n\n");
        -:   53:
        -:   54:	//testing 25 times
       52:   55:	for (i = 1; i <= MAXIMUSTESTIMUS; i++) {
        -:   56:		//seeding RNG
       50:   57:		rngSeed = rand();
        -:   58:		//assigning a random number of player to numberPlayers, minimum is 2 and maximum is 4
       50:   59:		numberPlayers = rand() % (MAX_PLAYERS - 1) + 2;//MAX_PLAYERS is defined in dominion.h
        -:   60:		//setting up the game
       50:   61:		initializeGame(numberPlayers, gameCards, rngSeed, &gameOn);
        -:   62:
       50:   63:		currentPlayer = 0;
        -:   64:		//using rand() to assign a randomized deck size
       50:   65:		gameOn.deckCount[currentPlayer] = rand() % MAX_DECK;//MAX-DECK is defined in dominion.h
        -:   66:		//assigning a value to the discard pile using MAX_DECK
       50:   67:		gameOn.discardCount[currentPlayer] = rand() % MAX_DECK;
        -:   68:		//assigning a random amount of cards to the current players hand
       50:   69:		gameOn.handCount[currentPlayer] = rand() % MAX_HAND;//MAX_HAND is defined in dominion.h
        -:   70:
        -:   71:		//after assigning random values, we pass those values on to our variables 
       50:   72:		numberInHand = gameOn.handCount[currentPlayer];
       50:   73:		numberInDeck = gameOn.deckCount[currentPlayer];
        -:   74:
        -:   75:		//playing adventurer card
       50:   76:		cardEffect(adventurer, 1, 1, 1, &gameOn, 1, 1);
        -:   77:		//after all of the setup, we test the card that was played for bugs using out personalAssert
       50:   78:		personalAssert(postAdventure(&gameOn, currentPlayer, numberInHand) == 1, "WARNING: BUG DETECTED.\n");	  
        -:   79:	}
        -:   80:	  
        -:   81:
        2:   82:	  printf("CONGRATULATIONS TESTING IS FINISHED ON ADVENTURER.\n\n\n");
        -:   83:
        2:   84:	  return 0;
        -:   85:}
